<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetCasClient</name>
    </assembly>
    <members>
        <member name="T:DotNetCasClient.Utils.UrlUtil">
            <summary>
            An internal class used to generate and modify URLs
            as needed for redirection and external communication.
            </summary>
            <remarks>
            See https://wiki.jasig.org/display/CASC/UrlUtil+Methods for additional
            information including sample output of each method.
            </remarks>
            <author>Scott Holodak</author>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.ConstructLoginRedirectUrl(System.Boolean,System.Boolean)">
            <summary>
            Constructs the URL to use for redirection to the CAS server for login
            </summary>
            <remarks>
            The server name is not parsed from the request for security reasons, which
            is why the service and server name configuration parameters exist.
            </remarks>
            <returns>The redirection URL to use</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.ConstructServiceUrl(System.Boolean)">
            <summary>
            Constructs a service URL using configured values in the following order:
            1.  if not empty, the value configured for Service is used
            - otherwise -
            2.  the value configured for ServerName is used together with HttpRequest
                data
            </summary>
            <remarks>
            The server name is not parsed from the request for security reasons, which
            is why the service and server name configuration parameters exist, per Jasig
            website.
            </remarks>
            <returns>the service URL to use, not encoded</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.ConstructValidateUrl(System.String,System.Boolean,System.Boolean,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructs a URL used to check the validitiy of a service ticket, with or without a proxy 
            callback URL, and with or without requiring renewed credentials.
            </summary>
            <remarks>See CAS Protocol specification, section 2.5</remarks>
            <param name="serviceTicket">The service ticket to validate.</param>
            <param name="renew">
            Whether or not renewed credentials are required.  If True, ticket validation
            will fail for Single Sign On credentials.
            </param>
            <param name="gateway">
            whether or not to include gatewayResponse=true in the request (client specific).
            </param>
            <param name="customParameters">custom parameters to add to the validation URL</param>
            <returns>The service ticket validation URL to use</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.ConstructProxyCallbackUrl">
            <summary>
            Constructs a proxy callback URL containing a ProxyCallbackParameter 
            (proxyResponse by default).  This URL is sent to the CAS server during a proxy
            ticket request and is then connected to by the CAS server.  If the CAS server
            cannot successfully connect (generally due to SSL configuration issues), the
            CAS server will refuse to send a proxy ticket. 
            </summary>
            <remarks>
            This is a .NET implementation specific method used to eliminate the need for 
            a special HTTP Handler.  Essentially, if the client detects an incoming request
            with the ProxyCallbackParameter in the URL (i.e., proxyResponse), that request 
            is treated specially and behaves as if it were handled by an HTTP Handler.  In 
            other words, this behavior may or may not short circuit the request event 
            processing and will not allow the underlying page to execute and transmit back to
            the client.  If your application does coincidentally make use of the key 
            'proxyResponse' as a URL parameter, you will need to configure a custom 
            proxyCallbackParameter value which does not conflict with the URL parameters in
            your application.
            </remarks>
            <returns>the proxy callback URL to use</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.ConstructProxyTicketRequestUrl(System.String,System.String)">
            <summary>
            Constructs a proxy ticket request URL containing both a proxy granting 
            ticket and a URL Encoded targetServiceUrl.  The URL returned will generally only
            be executed by the CAS client as a part of a proxy redirection in 
            CasAuthentication.ProxyRedirect(...) or CasAuthentication.GetProxyTicketIdFor(...)
            but may also be used by applications which require low-level access to the proxy
            ticket request functionality.
            </summary>
            <param name="proxyGrantingTicketId">
            The proxy granting ticket used to authorize the request for a proxy ticket on the 
            CAS server
            </param>
            <param name="targetService">
            The target service URL to request a proxy ticket request URL for
            </param>
            <returns>The URL to use to request a proxy ticket for the targetService specified</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.GetProxyRedirectUrl(System.String)">
            <summary>
            Attempts to request a proxy ticket for the targetService specified and
            returns a URL appropriate for redirection to the targetService containing
            a ticket.
            </summary>
            <param name="targetService">The target service for proxy authentication</param>
            <returns>The URL of the target service with a proxy ticket included</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.GetProxyRedirectUrl(System.String,System.String)">
            <summary>
            Attempts to request a proxy ticket for the targetService specified and
            returns a URL appropriate for redirection to the targetService containing
            a ticket.
            </summary>
            <param name="targetService">The target service for proxy authentication</param>
            <param name="proxyTicketUrlParameter">
            The name of the ticket URL parameter expected by the target service (ticket by
            default)
            </param>
            <returns>The URL of the target service with a proxy ticket included</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.ConstructSingleSignOutRedirectUrl">
            <summary>
            Constructs the URL to use for redirection to the CAS server for single
            signout.  The CAS server will invalidate the ticket granting ticket and
            redirect back to the current page.  The web application must then call
            ClearAuthCookie and revoke the ticket from the ServiceTicketManager to sign 
            the client out.
            </summary>
            <returns>the redirection URL to use, not encoded</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.RemoveCasArtifactsFromUrl(System.String)">
            <summary>
            Returns a copy of the URL supplied modified to remove CAS protocol-specific
            URL parameters.
            </summary>
            <param name="url">The URL to remove CAS artifacts from</param>
            <returns>The URL supplied without CAS artifacts</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.UrlUtil.ResolveUrl(System.String)">
            <summary>
            Resolves a relative ~/Url to a Url that is meaningful to the
            client.
            <remarks>
            Derived from: http://weblogs.asp.net/palermo4/archive/2004/06/18/getting-the-absolute-path-in-asp-net-part-2.aspx
            </remarks>        
            </summary>
            <author>J. Michael Palermo IV</author>
            <author>Scott Holodak</author>
            <param name="url">The Url to resolve</param>
            <returns>The fullly resolved Url</returns>
        </member>
        <member name="T:DotNetCasClient.Security.ICasPrincipal">
            <summary>
            Extension to the standard .Net IPrincipal that includes access to the
            Assertions for the associated user and a way to retrieve Proxy Tickets.
            for that user.
            </summary>
            <remarks>
            <para>
            Developers who don't want their code tied to CAS merely need to work
            with the .Net IPrincipal. However, in order to take advantabge of CAS
            specific features like Proxy Tickets and Attributes, ICasPrincipal must
            be used.
            </para>
            <para>
            ICasPrincipal is the .Net port of
              org.jasig.cas.client.authentication.AttributePrincipal
            </para>
            <para>
            Implementors should be Serializable
            </para>
            </remarks>
            <author>Scott Battaglia</author>
            <author>William G. Thompson, Jr. (.Net)</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="P:DotNetCasClient.Security.ICasPrincipal.Assertion">
            <summary>
            The Assertion backing this Principal
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.ICasPrincipal.ProxyGrantingTicket">
            <summary>
            The Proxy Granting ticket associated with this principal
            which is used to generate Proxy tickets to external 
            services.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.ICasPrincipal.Proxies">
            <summary>
            The chain of URL's involved in the proxy authentication of 
            the user on this system.  If a user starts on site A, proxy 
            authenticates to site B, and then proxy authenticates to this
            site, this will contain the URL of site A and site B.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Validation.TicketValidator.Saml11TicketValidator">
            <summary>
            SAML 1.1 Ticket Validator
            </summary>
            <remarks>
            This is the .Net port of
              org.jasig.cas.client.validation.Saml11TicketValidator
            </remarks>
            <author>Scott Battaglia</author>
            <author>Catherine D. Winfrey (.Net)</author>
            <author>Marvin S. Addison</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="T:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator">
            <summary>
            Abstract validator implementation for tickets that are validated against
            an Http server.
            </summary>
            <remarks>
            This is the .Net port of 
              org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator
            </remarks>
            <author>Scott Battaglia</author>
            <author>William G. Thompson, Jr. (.Net)</author>
            <author>Marvin S. Addison</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="T:DotNetCasClient.Validation.TicketValidator.ITicketValidator">
            <summary>
            Contract for a validator that will confirm the validity of a supplied ticket.
            </summary>
            <remarks>
            <para>
            Validator makes no statement about how to validate the ticket or the format 
            of the ticket (other than that it must be a String).
            </para>
            <para>
            This is the .Net port of org.jasig.cas.client.validation.TicketValidator
            </para>
            </remarks>
            <author>Scott Battaglia</author>
            <author>William G. Thompson, Jr. (.Net)</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.ITicketValidator.Initialize">
            <summary>
            You retrieve CasAuthentication properties in the constructor or else you will cause 
            a StackOverflow.  CasAuthentication.Initialize() will call Initialize() on all 
            relevant controls when its initialization is complete.  In Initialize(), you can 
            retrieve properties from CasAuthentication.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.ITicketValidator.Validate(System.String)">
            <summary>
            Attempts to validate a ticket for the provided service.
            </summary>
            <param name="ticket">the ticket to validate</param>
            <returns>
            The ICasPrincipal backed by the CAS Assertion included in the response from
            the CAS server for a successful ticket validation.
            </returns>
            <exception cref="T:DotNetCasClient.Validation.TicketValidationException">
            Thrown if ticket validation fails.
            </exception>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.ITicketValidator.ArtifactParameterName">
            <summary>
            The name of the request parameter whose value is the artifact for the
            cas protocol.  The default values are defined in DefaultArtifactParameterName,
            but these can be overridden in web.config.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.ITicketValidator.ServiceParameterName">
            <summary>
            The default name of the request parameter whose value is the service
            for the protocol.  The default values are defined in 
            DefaultServiceParameterName, but these can be overridden in web.config.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.ITicketValidator.UrlSuffix">
            <summary>
            The endpoint of the validation URL.  Should be relative (i.e. not start with a "/").
            i.e. validate or serviceValidate.
            <list>
              <item>CAS 1.0:  validate</item>
              <item>CAS 2.0:  serviceValidate or proxyValidate</item>
              <item>SAML 1.1: samlValidate</item>
            </list>
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator.Initialize">
            <summary>
            Perform any initialization required for the UrlTicketValidator implementation.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator.ParseResponseFromServer(System.String,System.String)">
            <summary>
            Parses the response from the server into a CAS Assertion and includes
            this in a CASPrincipal.
            </summary>
            <param name="response">
            the response from the server, in any format.
            </param>
            <param name="ticket">The ticket used to generate the validation response</param>
            <returns>
            a Principal backed by a CAS Assertion, if one could be parsed from the
            response.
            </returns>
            <exception cref="T:DotNetCasClient.Validation.TicketValidationException">
            Thrown if creation of the Assertion fails.
            </exception>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator.RetrieveResponseFromServer(System.String,System.String)">
            <summary>
            Default implementation that performs an HTTP GET request to the validation URL
            supplied with the supplied ticket and returns the response body as a string.
            </summary>
            <param name="validationUrl">The validation URL to request</param>
            <param name="ticket">The ticket parameter to pass to the URL</param>
            <returns></returns>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator.Validate(System.String)">
            <summary>
            Attempts to validate a ticket for the provided service.
            </summary>
            <param name="ticket">the ticket to validate</param>
            <returns>
            The ICasPrincipal backed by the CAS Assertion included in the response
            from the CAS server for a successful ticket validation.
            </returns>
            <exception cref="T:DotNetCasClient.Validation.TicketValidationException">
            Thrown if ticket validation fails.
            </exception>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator.CustomParameters">
            <summary>
            Custom parameters to pass to the validation URL.
            </summary>        
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator.UrlSuffix">
            <summary>
            The endpoint of the validation URL.  Should be relative (i.e. not start with a "/").
            i.e. validate or serviceValidate.
            <list>
              <item>CAS 1.0:  validate</item>
              <item>CAS 2.0:  serviceValidate or proxyValidate</item>
              <item>SAML 1.1: samlValidate</item>
            </list>
            </summary>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator.ArtifactParameterName">
            <summary>
            The protocol-specific name of the request parameter containing the artifact/ticket.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.AbstractUrlTicketValidator.ServiceParameterName">
            <summary>
            The protocol-specific name of the request parameter containing the service identifier.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.Saml11TicketValidator.Initialize">
            <summary>
            Performs Saml11TicketValidator initialization.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.Saml11TicketValidator.ParseResponseFromServer(System.String,System.String)">
            <summary>
            Parses the response from the server into a CAS Assertion and includes
            this in a CASPrincipal.
            </summary>
            <param name="response">
            the response from the server, in any format.
            </param>
            <param name="ticket">The ticket used to generate the validation response</param>
            <returns>
            a Principal backed by a CAS Assertion, if one could be created from the
            response.
            </returns>
            <exception cref="T:DotNetCasClient.Validation.TicketValidationException">
            Thrown if creation of the Assertion fails.
            </exception>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.Saml11TicketValidator.RetrieveResponseFromServer(System.String,System.String)">
            <summary>
            Requests CAS ticket validation by the configured CAS server.
            </summary>
            <param name="validationUrl">the URL to use for ticket validation</param>
            <param name="ticket">
            the ticket returned by the CAS server from a successful authentication
            </param>
            <returns>
            the XML response representing the ticket validation
            </returns>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.Saml11TicketValidator.UrlSuffix">
            <summary>
            The endpoint of the validation URL.  Should be relative (i.e. not start
            with a "/").
            i.e. validate or serviceValidate or samlValidate.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Validation.TicketValidator.Cas10TicketValidator">
            <summary>
            CAS 1.0 Ticket Validator
            </summary>
            <remarks>
            This is the .Net port of org.jasig.cas.client.validation.Cas10TicketValidator
            </remarks>
            <author>Scott Battaglia</author>
            <author>William G. Thompson, Jr. (.Net)</author>
            <author>Marvin S. Addison</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.Cas10TicketValidator.Initialize">
            <summary>
            Performs Cas10TicketValidator initialization.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.Cas10TicketValidator.ParseResponseFromServer(System.String,System.String)">
            <summary>
            Parses the response from the server into a CAS Assertion and includes this in
            a CASPrincipal.
            </summary>
            <param name="response">the response from the server, in any format.</param>
            <param name="ticket">The ticket used to generate the validation response</param>
            <returns>
            a Principal backed by a CAS Assertion, if one could be created from the response.
            </returns>
            <exception cref="T:DotNetCasClient.Validation.TicketValidationException">
            Thrown if creation of the Assertion fails.
            </exception>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.Cas10TicketValidator.UrlSuffix">
            <summary>
            The endpoint of the validation URL.  Should be relative (i.e. not start with a "/").
            i.e. validate or serviceValidate.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Utils.RequestEvaluator">
            <summary>
            A utility class for evaluating the type of request 
            </summary>
            <author>Scott Holodak</author>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestHasCasTicket">
            <summary>
            Determines whether the request has a CAS ticket in the URL
            </summary>
            <returns>True if the request URL contains a CAS ticket, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestIsCasAuthenticationResponse">
            <summary>
            Determines whether the request is a return request from the 
            CAS server containing a CAS ticket
            </summary>
            <returns>True if the request URL contains a CAS ticket, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestHasGatewayParameter">
            <summary>
            Determines whether the request contains the GatewayParameterName defined in 
            web.config or the default value 'gatewayResponse'
            </summary>
            <returns>True if the request contains the GatewayParameterName, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestIsProxyResponse">
            <summary>
            Determines whether the request is an inbound proxy callback verifications 
            from the CAS server
            </summary>
            <returns>True if the request is a proxy callback verificiation, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestRequiresGateway">
            <summary>
            Determines whether the current request requires a Gateway authentication redirect
            </summary>
            <returns>True if the request requires Gateway authentication, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetUserDoesNotAllowSessionCookies">
            <summary>
            Determines whether the user's browser refuses to accept session cookies
            </summary>
            <returns>True if the browser does not allow session cookies, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestIsUnauthorized">
            <summary>
            Determines whether the current request is unauthorized
            </summary>
            <returns>True if the request is unauthorized, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestIsUnAuthenticated">
            <summary>
            Determines whether the current request is unauthenticated
            </summary>
            <returns>True if the request is unauthenticated, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetResponseIsCasLoginRedirect">
            <summary>
            Determines whether the current request will be redirected to the 
            CAS login page
            </summary>
            <returns>True if the request will be redirected, otherwise False.</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestIsCasSingleSignOut">
            <summary>
            Determines whether the request is a CAS Single Sign Out request
            </summary>
            <returns>True if the request is a CAS Single Sign Out request, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetUserIsAuthenticated">
            <summary>
            Determines whether the User associated with the request has been 
            defined and is authenticated.
            </summary>
            <returns>True if the request has an authenticated User, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestIsCookiesRequiredUrl">
            <summary>
            Determines whether the request is for the CookiesRequiredUrl defined in web.config
            </summary>
            <returns>True if the request is to the CookiesRequiredUrl, otherwise False</returns>
        </member>
        <member name="M:DotNetCasClient.Utils.RequestEvaluator.GetRequestIsAppropriateForCasAuthentication">
            <summary>
            Determines whether the request is appropriate for CAS authentication.
            Generally, this is true for most requests except those for images,
            style sheets, javascript files and anything generated by the built-in
            ASP.NET handlers (i.e., web resources, trace handler).
            </summary>
            <returns>True if the request is appropriate for CAS authentication, otherwise False</returns>
        </member>
        <member name="T:DotNetCasClient.Security.Assertion">
            <summary>
            Represents a CAS response to a validation request.
            </summary>
            <remarks>
            <para>
            This is the .Net port of org.jasig.cas.client.validation.AssertionImpl
            </para>
            </remarks>
            <author>Scott Battaglia</author>
            <author>William G. Thompson, Jr. (.Net)</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="T:DotNetCasClient.Security.IAssertion">
            <summary>
            Represents a CAS response to a validation request.
            </summary>
            <remarks>
            <para>
            This is the .Net port of org.jasig.cas.client.validation.Assertion
            </para>
            <para>
            Implementors should be Serializable
            </para>
            </remarks>
            <author>Scott Battaglia</author>
            <author>William G. Thompson, Jr. (.Net)</author>
        </member>
        <member name="P:DotNetCasClient.Security.IAssertion.ValidFromDate">
            <summary>
            The date from which this Assertion is valid.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.IAssertion.ValidUntilDate">
            <summary>
            The date this Assertion is valid until.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.IAssertion.Attributes">
            <summary>
            The key/value pairs for attributes associated with this Assertion.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.IAssertion.PrincipalName">
            <summary>
            The name of the Principal that this Assertion backs.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Security.Assertion.#ctor(System.String)">
            <summary>
            Creates a new Assertion with the supplied Principal name, a
            ValidFromDate of now, no ValidUntilDate, and no attributes.
            </summary>
            <param name="principalName">
            the Principal name associated with this Assertion.
            </param>
        </member>
        <member name="M:DotNetCasClient.Security.Assertion.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            Creates a new Assertion with the supplied principal name and
            Assertion attributes, a ValidFromDate of now, and no ValidUntilDate.
            </summary>
            <param name="principalName">
            the Principal name associated with this Assertion.
            </param>
            <param name="attributes">
            the key/value pairs for the attributes to associate with this
            Assertion.
            </param>
        </member>
        <member name="M:DotNetCasClient.Security.Assertion.#ctor(System.String,System.DateTime,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            Creates a new Assertion with the supplied principal name, Assertion
            attributes, ValidFromDate, and ValidUntilDate.
            </summary>
            <param name="principalName">
            the principal name associated with this Assertion.
            </param>
            <param name="validFromDate">
            The date from which this Assertion is valid.
            </param>
            <param name="validUntilDate">
            The date this assertion is valid until.
            </param>
            <param name="attributes">
            the key/value pairs for the attributes to associate with this
            Assertion.
            </param>
        </member>
        <member name="P:DotNetCasClient.Security.Assertion.ValidFromDate">
            <summary>
            The date from which this Assertion is valid.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.Assertion.ValidUntilDate">
            <summary>
            The date this Assertion is valid until.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.Assertion.Attributes">
            <summary>
            key/value pairs for the attributes associated with this Assertion.
            e.g. authentication type.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.Assertion.PrincipalName">
            <summary>
            The PrincipalName for which this Assertion is valid.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Configuration.CasConfigurationException">
            <summary>
            Generic exception to be thrown when Cas Client configuration fails.
            </summary>
            <author>Catherine Winfrey</author>
        </member>
        <member name="M:DotNetCasClient.Configuration.CasConfigurationException.#ctor(System.String)">
            <summary>
            Constructs an exception with the supplied message.
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="M:DotNetCasClient.Configuration.CasConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an exception with the supplied message and chained exception
            </summary>
            <param name="message">the message</param>
            <param name="exception">the original exception</param>
        </member>
        <member name="T:DotNetCasClient.CasAuthentication">
            <summary>
            CasAuthentication exposes a public API for use in working with CAS Authentication
            in the .NET framework.  It also exposes all configured CAS client configuration 
            parameters as public static properties.
            </summary>
            <author>Marvin S. Addison</author>
            <author>Scott Holodak</author>
            <author>William G. Thompson, Jr.</author>
            <author>Catherine D. Winfrey</author>
        </member>
        <member name="F:DotNetCasClient.CasAuthentication.xmlNamespaceManager">
            XML Namespace Manager for namespace resolution in SSO SAML Parsing routine
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.Initialize">
            <summary>
            Initializes configuration-related properties and validates configuration.
            </summary>        
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ProxyRedirect(System.String)">
            <summary>
            Obtain a Proxy ticket and redirect to the foreign service url with 
            that ticket included in the url.  The foreign service must be configured 
            to accept the ticket.
            </summary>
            <param name="url">The foreign service to redirect to</param>
            <exception cref="T:System.ArgumentNullException">The url supplied is null</exception>
            <exception cref="T:System.ArgumentException">The url supplied is empty</exception>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ProxyRedirect(System.String,System.Boolean)">
            <summary>
            Obtain a Proxy ticket and redirect to the foreign service url with 
            that ticket included in the url.  The foreign service must be configured 
            to accept the ticket.
            </summary>
            <param name="url">The foreign service to redirect to</param>
            <param name="endResponse">
            Boolean indicating whether or not to short circuit the remaining request 
            pipeline events
            </param>
            <exception cref="T:System.ArgumentNullException">The url supplied is null</exception>
            <exception cref="T:System.ArgumentException">The url supplied is empty</exception>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ProxyRedirect(System.String,System.String)">
            <summary>
            Obtain a Proxy ticket and redirect to the foreign service url with 
            that ticket included in the url.  The foreign service must be configured 
            to accept the ticket.
            </summary>
            <param name="url">The foreign service to redirect to</param>
            <param name="proxyTicketUrlParameter">
            The ticket parameter to include in the remote service Url.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The url or proxyTicketUrlParameter supplied is null
            </exception>
            <exception cref="T:System.ArgumentException">
            The url or proxyTicketUrlParametersupplied is empty
            </exception>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ProxyRedirect(System.String,System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="url">The foreign service to redirect to</param>
            <param name="proxyTicketUrlParameter">
            The ticket parameter to include in the remote service Url.
            </param>
            <param name="endResponse">
            Boolean indicating whether or not to short circuit the remaining request 
            pipeline events
            </param>
            <exception cref="T:System.ArgumentNullException">
            The url or proxyTicketUrlParameter supplied is null
            </exception>
            <exception cref="T:System.ArgumentException">
            The url or proxyTicketUrlParametersupplied is empty
            </exception>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.GetProxyTicketIdFor(System.String)">
            <summary>
            Attempts to connect to the CAS server to retrieve a proxy ticket 
            for the target URL specified.
            </summary>
            <remarks>
            Problems retrieving proxy tickets are generally caused by SSL misconfiguration.
            The CAS server must be configured to trust the SSL certificate on the web application's 
            server.  The CAS server will attempt to establish an SSL connection to this web 
            application server to confirm that the proxy ticket request is legitimate.  If the 
            server does not trust the SSL certificate or the certificate authority/chain of the SSL
            certificate, the request will fail.
            </remarks>
            <param name="targetServiceUrl">The target Url to obtain a proxy ticket for</param>
            <returns>
            A proxy ticket for the target Url or an empty string if the request failed.
            </returns>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.RedirectToLoginPage">
            <summary>
            Redirects the current request to the CAS Login page
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.RedirectToLoginPage(System.Boolean)">
            <summary>
            Redirects the current request to the Login page and requires renewed
            CAS credentials
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.RedirectToCookiesRequiredPage">
            <summary>
            Redirects the current request to the Cookies Required page
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.RedirectToNotAuthorizedPage">
            <summary>
            Redirects the current request to the Not Authorized page
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.RedirectFromLoginCallback">
            <summary>
            Redirects the current request back to the requested page without
            the CAS ticket artifact in the URL.
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.RedirectFromFailedGatewayCallback">
            <summary>
            Redirects the current request back to the requested page without
            the gateway callback artifact in the URL.
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.GatewayAuthenticate(System.Boolean)">
            <summary>
            Attempt to perform a CAS gateway authentication.  This causes a transparent
            redirection out to the CAS server and back to the requesting page with or 
            without a CAS service ticket.  If the user has already authenticated for 
            another service against the CAS server and the CAS server supports Single 
            Sign On, this will result in the user being automatically authenticated.
            Otherwise, the user will remain anonymous.
            </summary>
            <param name="ignoreGatewayStatusCookie">
            The Gateway Status Cookie reflects whether a gateway authentication has 
            already been attempted, in which case the redirection is generally 
            unnecessary.  This property allows you to override the behavior and 
            perform a redirection regardless of whether it has already been attempted.
            </param>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.SingleSignOut">
            <summary>
            Logs the user out of the application and attempts to perform a Single Sign 
            Out against the CAS server.  If the CAS server is configured to support 
            Single Sign Out, this will prevent users from gateway authenticating 
            to other services.  The CAS server will attempt to notify any other 
            applications to revoke the session.  Each of the applications must be 
            configured to maintain session state on the server.  In the case of 
            ASP.NET web applications using DotNetCasClient, this requires defining a 
            serviceTicketManager.  The configuration for other client types (Java, 
            PHP) varies based on the client implementation.  Consult the Jasig wiki
            for more details.
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ProcessSingleSignOutRequest">
            <summary>
            Process SingleSignOut requests originating from another web application by removing the ticket 
            from the ServiceTicketManager (assuming one is configured).  Without a ServiceTicketManager
            configured, this method will not execute and this web application cannot respect external 
            SingleSignOut requests.
            </summary>
            <returns>
            Boolean indicating whether the request was a SingleSignOut request, regardless of
            whether or not the request actually required processing (non-existent/already expired).
            </returns>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ProcessProxyCallbackRequest">
            <summary>
            Process a Proxy Callback request from the CAS server.  Proxy Callback requests occur as a part
            of a proxy ticket request.  When the web application requests a proxy ticket for a third party
            service from the CAS server, the CAS server attempts to connect back to the web application 
            over an HTTPS connection.  The success of this callback is essential for the proxy ticket 
            request to succeed.  Failures are generally caused by SSL configuration errors.  See the 
            description of the SingleSignOut method for more details.  Assuming the SSL configuration is 
            correct, this method is responsible for handling the callback from the CAS server.  For 
            more details, see the CAS protocol specification.
            </summary>
            <returns>
            A Boolean indicating whether or not the proxy callback request is valid and mapped to a valid,
            outstanding Proxy Granting Ticket IOU.
            </returns>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ProcessTicketValidation">
            <summary>
            Validates a ticket contained in the URL, presumably generated by
            the CAS server after a successful authentication.  The actual ticket
            validation is performed by the configured TicketValidator 
            (i.e., CAS 1.0, CAS 2.0, SAML 1.0).  If the validation succeeds, the
            request is authenticated and a FormsAuthenticationCookie and 
            corresponding CasAuthenticationTicket are created for the purpose of 
            authenticating subsequent requests (see ProcessTicketValidation 
            method).  If the validation fails, the authentication status remains 
            unchanged (generally the user is and remains anonymous).
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ProcessRequestAuthentication">
            <summary>
            Attempts to authenticate requests subsequent to the initial authentication
            request (handled by ProcessTicketValidation).  This method looks for a 
            FormsAuthenticationCookie containing a FormsAuthenticationTicket and attempts
            to confirms its validitiy.  It either contains the CAS service ticket or a 
            reference to a CasAuthenticationTicket stored in the ServiceTicketManager 
            (if configured).  If it succeeds, the context.User and Thread.CurrentPrincipal 
            are set with a ICasPrincipal and the current request is considered 
            authenticated.  Otherwise, the current request is effectively anonymous.
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.SetGatewayStatusCookie(DotNetCasClient.GatewayStatus)">
            <summary>
            Attempts to set the GatewayStatus client cookie.  If the cookie is not
            present and equal to GatewayStatus.Attempting when a CAS Gateway request
            comes in (indicated by the presence of the 'gatewayParameterName' 
            defined in web.config appearing in the URL), the server knows that the 
            client is not accepting session cookies and will optionally redirect 
            the user to the 'cookiesRequiredUrl' (also defined in web.config).  If
            'cookiesRequiredUrl' is not defined but 'gateway' is, every page request
            will result in a round-trip to the CAS server.
            </summary>
            <param name="gatewayStatus">The GatewayStatus to attempt to store</param>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.GetGatewayStatus">
            <summary>
            Retrieves the GatewayStatus from the client cookie.
            </summary>
            <returns>
            The GatewayStatus stored in the cookie if present, otherwise 
            GatewayStatus.NotAttempted.
            </returns>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ClearAuthCookie">
            <summary>
            Sends a blank and expired FormsAuthentication cookie to the 
            client response.  This effectively removes the FormsAuthentication
            cookie and revokes the FormsAuthenticationTicket.  It also removes
            the cookie from the current Request object, preventing subsequent 
            code from being able to access it during the execution of the 
            current request.
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.SetAuthCookie(System.Web.Security.FormsAuthenticationTicket)">
            <summary>
            Encrypts a FormsAuthenticationTicket in an HttpCookie (using 
            GetAuthCookie) and includes it in the response.
            </summary>
            <param name="clientTicket">The FormsAuthenticationTicket to encode</param>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.GetAuthCookie(System.Web.Security.FormsAuthenticationTicket)">
            <summary>
            Creates an HttpCookie containing an encrypted FormsAuthenticationTicket,
            which in turn contains a CAS service ticket.
            </summary>
            <param name="ticket">The FormsAuthenticationTicket to encode</param>
            <returns>An HttpCookie containing the encrypted FormsAuthenticationTicket</returns>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.CreateFormsAuthenticationTicket(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Creates a FormsAuthenticationTicket for storage on the client.
            The UserData field contains the CAS Service Ticket which can be 
            used by the server-side ServiceTicketManager to retrieve additional 
            details about the ticket (e.g. assertions)
            </summary>
            <param name="netId">User associated with the ticket</param>
            <param name="cookiePath">Relative path on server in which cookie is valid</param>
            <param name="serviceTicket">CAS service ticket</param>
            <param name="validFromDate">Ticket valid from date</param>
            <param name="validUntilDate">Ticket valid too date</param>
            <returns>Instance of a FormsAuthenticationTicket</returns>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.GetFormsAuthenticationTicket">
            <summary>
            Looks for a FormsAuthentication cookie and attempts to
            parse a valid, non-expired FormsAuthenticationTicket.
            It ensures that the UserData field has a value (presumed
            to be a CAS Service Ticket).
            </summary>
            <returns>
            Returns the FormsAuthenticationTicket contained in the 
            cookie or null if any issues are encountered.
            </returns>
        </member>
        <member name="M:DotNetCasClient.CasAuthentication.ExtractSingleSignOutTicketFromSamlResponse(System.String)">
            <summary>
            Extracts the CAS ticket from the SAML message supplied.
            </summary>
            <param name="xmlAsString">SAML message from CAS server</param>
            <returns>The CAS ticket contained in SAML message</returns>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.TicketValidatorName">
            <summary>
            Name of ticket validator that validates CAS tickets using a 
            particular protocol.  Valid values are Cas10, Cas20, and Saml11.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.TicketValidator">
            <summary>
            An instance of the TicketValidator specified in the 
            TicketValidatorName property.  This will either be an instance of 
            a Cas10TicketValidator, Cas20TicketValidator, or 
            Saml11TicketValidator.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.ServiceTicketManagerProvider">
            <summary>
            The ticket manager to use to store tickets returned by the CAS server
            for validation, revocation, and single sign out support.
            <remarks>
            Currently supported values: CacheServiceTicketManager
            </remarks>
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.ServiceTicketManager">
            <summary>
            An instance of the provider specified in the ServiceTicketManagerProvider property.
            ServiceTicketManager will be null if no serviceTicketManager is 
            defined in web.config.  If a ServiceTicketManager is defined, this will allow 
            access to and revocation of outstanding CAS service tickets along with 
            additional information about the service tickets (i.e., IP address, 
            assertions, etc.).
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.ProxyTicketManagerProvider">
            <summary>
            The ticket manager to use to store and resolve ProxyGrantingTicket IOUs to 
            ProxyGrantingTickets
            <remarks>
            Currently supported values: CacheProxyTicketManager
            </remarks>
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.ProxyTicketManager">
            <summary>
            An instance of the provider specified in the ProxyTicketManagerProvider property.
            ProxyTicketManager will be null if no proxyTicketManager is 
            defined in web.config.  If a ProxyTicketManager is defined, this will allow 
            generation of proxy tickets for external sites and services.  
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.Gateway">
            <summary>
            Enable CAS gateway feature, see http://www.jasig.org/cas/protocol section 2.1.1.
            Default is false.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.GatewayStatusCookieName">
            <summary>
            The name of the cookie used to store the Gateway status (NotAttempted, 
            Success, Failed).  This cookie is used to prevent the client from 
            attempting to gateway authenticate every request.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.FormsLoginUrl">
            <summary>
            The Forms LoginUrl property set in system.web/authentication/forms
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.FormsTimeout">
            <summary>
            The Forms Timeout property set in system.web/authentication/forms
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.CasServerLoginUrl">
            <summary>
            URL of CAS login form.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.CasServerUrlPrefix">
            <summary>
            URL to root of CAS server application.  For example, if your 
            CasServerLoginUrl is https://fed.example.com/cas/login
            then your CasServerUrlPrefix would be https://fed.example.com/cas/
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.TicketTimeTolerance">
            <summary>
            SAML ticket validator property to allow at most the given time 
            difference in ms between artifact (ticket) timestamp and CAS server 
            system time.  Increasing this may have negative security consequences; 
            we recommend fixing sources of clock drift rather than increasing 
            this value.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.ServerName">
            <summary>
            The server name of the server hosting the client application.  Service URL
            will be dynamically constructed using this value if Service is not specified.
            e.g. https://app.princeton.edu/
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.Renew">
            <summary>
            Force user to reauthenticate to CAS before accessing this application.
            This provides additional security at the cost of usability since it effectively
            disables SSO for this application.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.RedirectAfterValidation">
            <summary>
            Whether to redirect to the same URL after ticket validation, but without the ticket
            in the parameter.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.ProcessIncomingSingleSignOutRequests">
            <summary>
            Specifies whether external single sign out requests should be processed.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.NotAuthorizedUrl">
            <summary>
            The URL to redirect to when the request has a valid CAS ticket but the user is 
            not authorized to access the URL or resource.  If this option is set, users will
            be redirected to this URL.  If it is not set, the user will be redirected to the 
            CAS login screen with a Renew option in the URL (to force for alternate credential
            collection).
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.CookiesRequiredUrl">
            <summary>
            The URL to redirect to when the client is not accepting session 
            cookies.  This condition is detected only when gateway is enabled.  
            This will lock the users onto a specific page.  Otherwise, every 
            request will cause a silent round-trip to the CAS server, adding 
            a parameter to the URL.
            </summary>        
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.GatewayParameterName">
            <summary>
            The URL parameter to append to outbound CAS request's ServiceName 
            when initiating an automatic CAS Gateway request.  This parameter 
            plays a role in detecting whether or not the client has cookies 
            enabled.  The default value is 'gatewayResponse' and only needs to 
            be explicitly defined if that URL parameter has a meaning elsewhere
            in your application.                              
            </summary>        
        </member>
        <member name="P:DotNetCasClient.CasAuthentication.ProxyCallbackParameterName">
            <summary>
            The URL parameter to append to outbound CAS proxy request's pgtUrl
            when initiating an proxy ticket service validation.  This is used
            to determine whether the request is originating from the CAS server
            and contains a pgtIou.
            </summary>
        </member>
        <member name="T:DotNetCasClient.State.IProxyTicketManager">
            <summary>
             Defines the interface for a ProxyTicketManager implementation.  ProxyTicketManagers
             are responsible for temporary storage of state information relating to Proxy Tickets.
             For active-active clustered/web-farm configurations, the state must be stored in a 
             persistent storage mechanism that is accessible from any node or server that handles
             web requests.
            </summary>
             <author>Scott Holodak</author>
        </member>
        <member name="M:DotNetCasClient.State.IProxyTicketManager.Initialize">
            <summary>
            You retrieve CasAuthentication properties in the constructor or else you will cause 
            a StackOverflow.  CasAuthentication.Initialize() will call Initialize() on all 
            relevant controls when its initialization is complete.  In Initialize(), you can 
            retrieve properties from CasAuthentication.
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.IProxyTicketManager.RemoveExpiredMappings">
            <summary>
            Removes expired PGTIOU-PGT from the ticket store
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.IProxyTicketManager.InsertProxyGrantingTicketMapping(System.String,System.String)">
            <summary>
            Method to save the ProxyGrantingTicket to the backing storage facility.
            </summary>
            <param name="proxyGrantingTicketIou">used as the key</param>
            <param name="proxyGrantingTicket">used as the value</param>
        </member>
        <member name="M:DotNetCasClient.State.IProxyTicketManager.GetProxyGrantingTicket(System.String)">
            <summary>
            Method to retrieve a ProxyGrantingTicket based on the
            ProxyGrantingTicketIou.  Implementations are not guaranteed to
            return the same result if retieve is called twice with the same 
            proxyGrantingTicketIou.
            </summary>
            <param name="proxyGrantingTicketIou">used as the key</param>
            <returns>the ProxyGrantingTicket Id or null if it can't be found</returns>
        </member>
        <member name="T:DotNetCasClient.State.CacheProxyTicketManager">
            <summary>
             An IProxyTicketManager implementation that relies on the ASP.NET Caching model for ticket 
             storage.  Generally this implies that the ticket storage is maintained locally on the web
             server (either in memory or on disk).  A limitation of this model is that it will not 
             support clustered, load balanced, or round-robin style configurations.
            </summary>
             <author>Scott Holodak</author>
        </member>
        <member name="M:DotNetCasClient.State.CacheProxyTicketManager.Initialize">
            <summary>
            You retrieve CasAuthentication properties in the constructor or else you will cause 
            a StackOverflow.  CasAuthentication.Initialize() will call Initialize() on all 
            relevant controls when its initialization is complete.  In Initialize(), you can 
            retrieve properties from CasAuthentication.
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.CacheProxyTicketManager.RemoveExpiredMappings">
            <summary>
            Removes expired PGTIOU-PGT from the ticket store
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.CacheProxyTicketManager.InsertProxyGrantingTicketMapping(System.String,System.String)">
            <summary>
            Method to save the ProxyGrantingTicket to the backing storage facility.
            </summary>
            <param name="proxyGrantingTicketIou">used as the key</param>
            <param name="proxyGrantingTicket">used as the value</param>
        </member>
        <member name="M:DotNetCasClient.State.CacheProxyTicketManager.GetProxyGrantingTicket(System.String)">
            <summary>
            Method to retrieve a ProxyGrantingTicket based on the
            ProxyGrantingTicketIou.  Implementations are not guaranteed to
            return the same result if retieve is called twice with the same 
            proxyGrantingTicketIou.
            </summary>
            <param name="proxyGrantingTicketIou">used as the key</param>
            <returns>the ProxyGrantingTicket Id or null if it can't be found</returns>
        </member>
        <member name="T:DotNetCasClient.Utils.HttpUtil">
            <summary>
            A helper utility class to facilitate outbound HTTP GET and POST request
            </summary>
            <author>Scott Holodak</author>
        </member>
        <member name="M:DotNetCasClient.Utils.HttpUtil.PerformHttpGet(System.String,System.Boolean)">
            <summary>
            Executes an HTTP GET request against the Url specified, returning the 
            entire response body in string form.
            </summary>
            <param name="url">The URL to request</param>
            <param name="requireHttp200">
            Boolean indicating whether or not to return 
            null if the repsonse status code is not 200 (OK).
            </param>
            <returns>
            The response body or null if the response status is required to 
            be 200 (OK) but is not
            </returns>
        </member>
        <member name="M:DotNetCasClient.Utils.HttpUtil.PerformHttpPost(System.String,System.String,System.Boolean)">
            <summary>
            Executes an HTTP POST against the Url specified with the supplied post data, 
            returning the entire response body in string form.
            </summary>
            <param name="url">The URL to post to</param>
            <param name="postData">The x-www-form-urlencoded data to post to the URL</param>
            <param name="requireHttp200">
            Boolean indicating whether or not to return 
            null if the repsonse status code is not 200 (OK).
            </param>
            <returns>
            The response body or null if the response status is required to 
            be 200 (OK) but is not
            </returns>
        </member>
        <member name="T:DotNetCasClient.Logging.Category">
            <summary>
            Defines a logging category.
            </summary>
            <author>Marvin S. Addison</author>
        </member>
        <member name="P:DotNetCasClient.Logging.Category.Name">
            <summary>
            Gets the category name of the logger.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Logging.Category.Config">
            <summary>
            Gets the Config category. 
            </summary>
        </member>
        <member name="P:DotNetCasClient.Logging.Category.HttpModule">
            <summary>
            Gets the HttpModule category.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Logging.Category.Protocol">
            <summary>
            Gets the Protocol category.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Logging.Category.Security">
            <summary>
            Gets the Security category.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Validation.SamlUtils">
            <summary>
            Utility methods for processing SAML entities, such as the Assertion in a
            SAML 1.1 response from a CAS server.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.SamlUtils.IsValidAssertion(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Determines whether the SAML Assertion is valid in terms of the
            'not before' and the 'not on or after' times.
            </summary>
            <param name="notBefore">
            the 'not before' time parsed from the Assertion
            </param>
            <param name="notOnOrAfter">
            the 'not on or after' times parsed from the Assertion
            </param>
            <param name="toleranceTicks">
            Tolerance ticks for checking the current time against the SAML Assertion
            valid times.
            </param>
            <returns>
            true if this Assertion is valid relative to the current time; otherwise
            returns false
            </returns>
        </member>
        <member name="M:DotNetCasClient.Validation.SamlUtils.GetAttributesFor(System.Xml.XmlNode,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Populates an IDictionary with the Attributes from the SAML Assertion
            for the given SAML Subject.
            </summary>
            <param name="attributeStmtNode">
            the Attribute statement parsed from the SAML Assertion
            </param>
            <param name="nsmgr">
            the XmlNamespaceManager for the input XMLNode containing the SAML
            Attribute statement to be parsed
            </param>
            <param name="subjectName">
            the SAML Subject for which Attributes are to be retrieved
            </param>
            <returns>
            the IDictionary of matching attributes, which will be an empty
            IDictionary if no matches are found.  The key is the Attribute name
            and the value is the IList of values for that Attribute, which might
            be an empty IList.
            </returns>
            <exception cref="T:DotNetCasClient.Validation.TicketValidationException">
            Thrown if expected entries if the requested SAML subject can not be
            parsed from the attrStmtNode.
            </exception>
        </member>
        <member name="M:DotNetCasClient.Validation.SamlUtils.GetAttributeValue(System.Xml.XmlAttributeCollection,System.String)">
            <summary>
            Retrieves the value for the specified attribute name from the
            collection of attributes.
            </summary>
            <param name="attrs">the attributes to process</param>
            <param name="attrName">the name of the attribute desired</param>
            <returns>
            the parsed value if the attribute is found; otherwise null is returned.
            </returns>
        </member>
        <member name="M:DotNetCasClient.Validation.SamlUtils.GetAttributeValueAsDateTime(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the value for the specified attribute name and converts it
            to a DateTime value.
            </summary>
            <param name="currentNode">
            the node containing the attributes to be processed
            </param>
            <param name="attrName">the name of the attribute desired</param>
            <returns>
            the parsed and converted value
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the desired attribute is not found
            </exception>
        </member>
        <member name="T:DotNetCasClient.GatewayStatus">
            <summary>
            Lists the possible states of the gateway feature. 
            </summary>
            <author>Scott Holodak</author>
        </member>
        <member name="F:DotNetCasClient.GatewayStatus.NotAttempted">
            <summary>
            Gateway authentication has not been attempted or the client is not 
            accepting session cookies
            </summary>
        </member>
        <member name="F:DotNetCasClient.GatewayStatus.Attempting">
            <summary>
            Gateway authentication is in progress
            </summary>
        </member>
        <member name="F:DotNetCasClient.GatewayStatus.Success">
            <summary>
            The Gateway authentication attempt was successful.  Gateway 
            authentication will not be attempted in subsequent requests
            </summary>
        </member>
        <member name="F:DotNetCasClient.GatewayStatus.Failed">
            <summary>
            The Gateway authentication attempt was attempted, but a service 
            ticket was not returned.  Gateway authentication will not be 
            attempted in subsequent requests.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Configuration.CasClientConfiguration">
            <summary>
            CAS specific ConfigurationSection for Web.config.
            </summary>
            <author>Scott Holodak</author>
            <author>Marvin S. Addison</author>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.Config">
            <summary>
            The CasClientConfiguration configuration element defined 
            in web.config
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.CasServerLoginUrl">
            <summary>
            Defines the exact CAS server login URL.
            e.g. https://cas.princeton.edu/cas/login
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.CasServerUrlPrefix">
            <summary>
            Defines the prefix for the CAS server. Should be everything up to the URL endpoint,
            including the /.
            e.g. http://cas.princeton.edu/
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.TicketValidatorName">
            <summary>
            The ticket validator to use to validate tickets returned by the CAS server.
            <remarks>
            Currently supported values: Cas10 / Cas20 / Saml11
            </remarks>
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.TicketTimeTolerance">
            <summary>
            Tolerance milliseconds for checking the current time against the SAML Assertion
            valid times.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.Service">
            <summary>
            The Service URL to send to the CAS server.
            e.g. https://app.princeton.edu/example/
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.ServerName">
            <summary>
            The server name of the server hosting the client application.  Service URL
            will be dynamically constructed using this value if Service is not specified.
            e.g. https://app.princeton.edu/
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.Renew">
            <summary>
            Specifies whether renew=true should be sent to URL's directed to the
            CAS server.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.Gateway">
            <summary>
            Specifies whether or not to redirect to the CAS server logon for a gateway request.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.GatewayStatusCookieName">
            <summary>
            The name of the cookie used to store the Gateway status (NotAttempted, 
            Success, Failed).  This cookie is used to prevent the client from 
            attempting to gateway authenticate every request.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.ArtifactParameterName">
            <summary>
            Specifies the name of the request parameter whose value is the artifact (e.g. "ticket").
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.ServiceParameterName">
            <summary>
            Specifies the name of the request parameter whose value is the service (e.g. "service")
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.RedirectAfterValidation">
            <summary>
            Whether to redirect to the same URL after ticket validation, but without the ticket
            in the parameter.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.EncodeServiceUrl">
            <summary>
            Whether to encode the session ID into the Service URL.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.SingleSignOut">
            <summary>
            Specifies whether single sign out functionality should be enabled.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.ServiceTicketManager">
            <summary>
            The service ticket manager to use to store tickets returned by the 
            CAS server for validation, revocation, and single sign out support.
            <remarks>
            Currently supported values: CacheServiceTicketManager
            </remarks>
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.ProxyTicketManager">
            <summary>
            The proxy ticket manager to use to store and resolve 
            ProxyGrantingTicket IOUs to ProxyGrantingTickets
            <remarks>
            Currently supported values: CacheProxyTicketManager
            </remarks>
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.NotAuthorizedUrl">
            <summary>
            URL to redirect to when the request has a validated and verified 
            CAS Authentication Ticket, but the identity associated with that 
            ticket is not authorized to access the requested resource.  If this 
            option is omitted, the request will be redirected to the CAS server
            for alternate credentials (with the 'renew' argument set). 
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.CookiesRequiredUrl">
            <summary>
            The URL to redirect to when the client is not accepting session 
            cookies.  This condition is detected only when gateway is enabled.  
            This will lock the users onto a specific page.  Otherwise, every 
            request will cause a silent round-trip to the CAS server, adding 
            a parameter to the URL.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.GatewayParameterName">
            <summary>
            The URL parameter to append to outbound CAS request's ServiceName 
            when initiating an automatic CAS Gateway request.  This parameter 
            plays a role in detecting whether or not the client has cookies 
            enabled.  The default value is 'gatewayResponse' and only needs to 
            be explicitly defined if that URL parameter has a meaning elsewhere
            in your application.  If you choose not define the CookiesRequiredUrl,
            you can detect that session cookies are not enabled in your application
            by testing for this parameter in the Request.QueryString having the 
            value 'true'.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Configuration.CasClientConfiguration.ProxyCallbackParameterName">
            <summary>
            The URL parameter to append to outbound CAS proxy request's pgtUrl
            when initiating an proxy ticket service validation.  This is used
            to determine whether the request is originating from the CAS server
            and contains a pgtIou.
            </summary>
        </member>
        <member name="T:DotNetCasClient.CasAuthenticationTicket">
            <summary>
            Data object representing a Cas Authentication Ticket.  The ServiceTicket,
            stored on the client in the UserData field of a FormsAuthenticationTicket,
            is used as a key to retrieve the information in this class from a 
            ServiceTicketManager instance.  Without a ServiceTicketManager configured, the 
            CasAuthententicationTicket cannot be retrieved.
            </summary>
            <author>Scott Holodak</author>
        </member>
        <member name="M:DotNetCasClient.CasAuthenticationTicket.#ctor">
            <summary>
            Empty constructor (to be used during Serialization/Deserialization)
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthenticationTicket.#ctor(System.String,System.String,System.String,DotNetCasClient.Security.IAssertion)">
            <summary>
            Public CasAuthenticationTicket constructor
            </summary>
            <param name="serviceTicket">CAS Service Ticket associated with this CasAuthenticationTicket</param>
            <param name="originatingServiceName">ServiceName used during CAS authentication/validation</param>
            <param name="clientHostAddress">IP address of the client initiating the authentication request</param>
            <param name="assertion">CAS assertion returned from the CAS server during ticket validation</param>
        </member>
        <member name="M:DotNetCasClient.CasAuthenticationTicket.ToString">
            <summary>
            Exposes the CasAuthenticationTicket and all related properties as a multi-line string.
            </summary>
            <returns>A string representation of the CasAuthenticationTicket for use in debugging</returns>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.NetId">
            <summary>
            The NetId username used to authenticate against the CAS server.  This
            information is retrieved via ticket validation and should not from 
            the web application.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.ServiceTicket">
            <summary>
            The CAS Service Ticket returned from the CAS Server (typically as the 
            ticket parameter in the URL).
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.ProxyGrantingTicketIou">
            <summary>
            The Proxy Granting Ticket IOU used to retrieve a Proxy ticket.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.ProxyGrantingTicket">
            <summary>
            The Proxy Granting Ticket used to generate Proxy tickets
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.Proxies">
            <summary>
            The Proxy path associated with the user
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.OriginatingServiceName">
            <summary>
            The ServiceName used during the initial authentication and ticket 
            validation.  When a Single Sign Out request is received from the CAS s
            server, this is used as a safety mechanism to confirm that the CAS 
            server's SSO request is valid.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.ClientHostAddress">
            <summary>
            The IP address of the client that originally requested the CAS Service 
            Ticket.  By tracking IP addresses, this enables applications with a 
            ServiceTicketManager configured to detect and/or prevent multiple logins by a 
            user from different IP addresses.  
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.Assertion">
            <summary>
            The CAS assertion associated with the service ticket.  This contains the 
            principal name, the validity date/times, and the attributes associated
            with the service ticket.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.ValidFromDate">
            <summary>
            The ValidFromDate associated with the ticket.  This is derived from, but 
            not the same as the Assertion's ValidFromDate.  If the Assertion's 
            ValidFromDate is equal to DateTime.MinValue, the CasAuthenticationTicket's 
            ValidFromDate is set to DateTime.Now.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.ValidUntilDate">
            <summary>
            The ValidUntilDate associated with the ticket.  This is derived from, but
            not the same as the Assertion's ValidUntilDate.  If the Assertion's 
            ValidUntilDate is equal to DateTime.MinValue, the following rule is 
            applied:  If the Assertion's ValidUntilDate is in the future, the 
            ValidUntilDate is used as is.  If the Assertion's ValidUntilDate is in 
            the past, the ValidFromDate + FormsAuthentication.Timeout timespan is
            used.
            </summary>
        </member>
        <member name="P:DotNetCasClient.CasAuthenticationTicket.Expired">
            <summary>
            Readonly property which indicates whether or not the ValidUntilDate is in
            the past (i.e., the ticket is expired).  Expired tickets should/will be 
            purged from the ServiceTicketManager during the RemoveExpiredTickets() call,
            during the BeginRequest event handler.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Validation.CasSaml11Response">
            <summary>
            Represents a CAS SAML 1.1 response from a CAS server, using Xml parsing to
            populate the object.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.CasSaml11Response.#ctor(System.String,System.Int64)">
            <summary>
            Creates a CasSaml11Response from the response returned by the CAS server.
            The SAMLAssertion processed is the first valid SAML Asssertion found in
            the server response.
            </summary>
            <param name="response">
            the xml for the SAML 1.1 response received in response to the
            samlValidate query to the CAS server
            </param>
            <param name="tolerance">
            Tolerance milliseconds for checking the current time against the SAML
            Assertion valid times.
            </param>
        </member>
        <member name="M:DotNetCasClient.Validation.CasSaml11Response.ProcessValidAssertion">
            <summary>
            Initializes the CAS IAssertion for this instance from the first valid
            Assertion node in the CAS server response.
            </summary>
            <exception cref="T:DotNetCasClient.Validation.TicketValidationException">
            Thrown when data problems are encountered parsing
            the CAS server response that contains the Assertion, such as
            no valid Assertion found or no Authentication statment found in the
            the valid Assertion.
            </exception>
        </member>
        <member name="P:DotNetCasClient.Validation.CasSaml11Response.HasCasSamlAssertion">
            <summary>
             Whether a valid SAML Assertion was found for processing
            </summary>
        </member>
        <member name="P:DotNetCasClient.Validation.CasSaml11Response.CasPrincipal">
            <summary>
             The JaSig CAS ICasPrincipal assertion built from the received CAS
             SAML 1.1 response
            </summary>
        </member>
        <member name="T:DotNetCasClient.Utils.EnhancedUriBuilder">
            <summary>
            Enhanced UriBuilder class with collection-based query string access.
            </summary>    
            <remarks>Adapted from http://forums.asp.net/t/693414.aspx </remarks>    
            <author>TlighT on ASP.NET forums</author>
            <author>Scott Holodak</author>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.#ctor">
            <summary>
            Initializes an EnhancedUriBuilder with no Uri data
            </summary>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.#ctor(System.String)">
            <summary>
            Initializes an EnhancedUriBuilder with the Uri supplied.
            </summary>
            <param name="uri">The string representation of a Uri to initialize with</param>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.#ctor(System.Uri)">
            <summary>
            Initializes an EnhancedUriBuilder with the Uri supplied.
            </summary>
            <param name="uri">The Uri to initialize with</param>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.#ctor(System.String,System.String)">
            <summary>
            Initializes an EnhancedUriBuilder with the schemeName and hostName supplied.
            </summary>
            <param name="schemeName">The schemeName to initialize with</param>
            <param name="hostName">The hostName to initialize with</param>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes an EnhancedUriBuilder with the scheme, host, and portNumber supplied.
            </summary>
            <param name="scheme">The scheme to initialize with</param>
            <param name="host">The host to initialize with</param>
            <param name="portNumber">The portNumber to initialize with</param>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes an EnhancedUriBuilder with the scheme, host, port, and pathValue supplied.
            </summary>
            <param name="scheme">The scheme to initialize with</param>
            <param name="host">The host to initialize with</param>
            <param name="port">The port to initialize with</param>
            <param name="pathValue">The pathValue to initialize with</param>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes an EnhancedUriBuilder with the scheme, host, port, path, and extraValue supplied.
            </summary>
            <param name="scheme">The scheme to initialize with</param>
            <param name="host">The host to initialize with</param>
            <param name="port">The port to initialize with</param>
            <param name="path">The path to initialize with</param>
            <param name="extraValue">The extraValue to initialize with</param>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.Combine(System.String,System.String)">
            <summary>
            Concatenates two portions of a Url, stripping duplicate forward-slashes.
            </summary>
            <param name="hostOrPathPortion">The left-hand side of the Url to be combined</param>
            <param name="pathPortion">The right-hand side of the Url to be combined</param>
            <returns></returns>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.ToString">
            <summary>
            The string representation of the EnhancedUriBuilder
            </summary>
            <remarks>
            Use of this method is discouraged.  You will generally want to return the 
            Uri.RawUri property instead as ToString() will include standard port numbers
            where they generally are not necessary (:80 and :443).
            </remarks>
            <returns></returns>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.SyncQueryItems">
            <summary>
            Refreshes the query item collection if the query is marked as dirty.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.CreateItemsFromQuery">
            <summary>
            Rebuilds the query item collection from its string representation.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.SyncQuery">
            <summary>
            Refreshes the string representation of the query if the query item collection is marked as dirty.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.CreateQueryFromItems">
            <summary>
            Rebuilds the string representation of the query from the query item collection.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Utils.EnhancedUriBuilder.Uri">
            <summary>
            The current Uri value representing the current state of the EnhancedUriBuilder.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Utils.EnhancedUriBuilder.QueryItems">
            <summary>
            The collection of query string items included in the Uri.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Utils.EnhancedUriBuilder.Query">
            <summary>
            The query portion of the Uri
            </summary>
        </member>
        <member name="T:DotNetCasClient.Utils.EnhancedUriBuilder.QueryItemCollection">
            <summary>
            A customized NameValueCollection designed to store URL parameters.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.QueryItemCollection.Add(System.String,System.String)">
            <summary>
            Adds a name/value pair to the collection
            </summary>
            <param name="name">The name of the URL parameter to add</param>
            <param name="value">The value of the URL parameter</param>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.QueryItemCollection.Remove(System.String)">
            <summary>
            Removes a name/value pair from the collection
            </summary>
            <param name="name">The name of the URL parameter to remove</param>
        </member>
        <member name="M:DotNetCasClient.Utils.EnhancedUriBuilder.QueryItemCollection.Set(System.String,System.String)">
            <summary>
            Sets a new value for the given URL parameter.
            </summary>
            <param name="name">The name of the URL parameter to set</param>
            <param name="value">The new value of the URL parameter</param>
        </member>
        <member name="P:DotNetCasClient.Utils.EnhancedUriBuilder.QueryItemCollection.IsDirty">
            <summary>
            Indicates whether the collection is dirty (has had values 
            added, removed, or changed)
            </summary>
        </member>
        <member name="T:DotNetCasClient.State.IServiceTicketManager">
            <summary>
            IServiceTicketManager defines the core contract that a ticket manager must implement in 
            order to support the CAS client features which require server-side state tracking.
            </summary>
            <author>Scott Holodak</author>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.Initialize">
            <summary>
            You retrieve CasAuthentication properties in the constructor or else you will cause 
            a StackOverflow.  CasAuthentication.Initialize() will call Initialize() on all 
            relevant controls when its initialization is complete.  In Initialize(), you can 
            retrieve properties from CasAuthentication.
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.RemoveExpiredTickets">
            <summary>
            Removes expired entries from the ticket store
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.GetTicket(System.String)">
            <summary>
            Retrieve a CasAuthenticationTicket from the ticket store 
            by it's CAS Service Ticket
            </summary>
            <param name="serviceTicket">The service ticket generated by the CAS server</param>
            <returns>The CasAuthenticationTicket or null if no matching ticket is found</returns>
            <exception cref="T:System.ArgumentNullException">serviceTicket is null</exception>
            <exception cref="T:System.ArgumentException">serviceTicket is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.InsertTicket(DotNetCasClient.CasAuthenticationTicket,System.DateTime)">
            <summary>
            Inserts a CasAuthenticationTicket to the ticket store with a corresponding 
            ticket expiration date.
            </summary>
            <param name="casAuthenticationTicket">The CasAuthenticationTicket to insert</param>
            <param name="expiration">The date and time at which the ticket expires</param>
            <exception cref="T:System.ArgumentNullException">casAuthenticationTicket is null</exception>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.UpdateTicketExpiration(DotNetCasClient.CasAuthenticationTicket,System.DateTime)">
            <summary>
            Updates the expiration date and time for an existing ticket.  If the ticket does
            not exist in the ticket store, just return (do not throw an exception).
            </summary>
            <param name="casAuthenticationTicket">The CasAuthenticationTicket to insert</param>
            <param name="newExpiration">The new expiration date and time</param>
            <exception cref="T:System.ArgumentNullException">casAuthenticationTicket is null</exception>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.RevokeTicket(System.String)">
            <summary>
            Removes the ticket from the collection if it exists.  If the ticket does not
            exist in the ticket store, just return (do not throw an exception).
            </summary>
            <param name="serviceTicket">The ticket to remove from the ticket store</param>
            <exception cref="T:System.ArgumentNullException">serviceTicket is null</exception>
            <exception cref="T:System.ArgumentException">serviceTicket is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.ContainsTicket(System.String)">
            <summary>
            Indicates whether or not the ticket store contains the supplied serviceTicket
            </summary>
            <param name="serviceTicket">The service ticket to check for</param>
            <returns>True if the ticket is contained in the store</returns>
            <exception cref="T:System.ArgumentNullException">serviceTicket is null</exception>
            <exception cref="T:System.ArgumentException">serviceTicket is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.RevokeUserTickets(System.String)">
            <summary>
            Revoke all tickets corresponding to the supplied NetId.
            </summary>
            <param name="netId">The NetId to revoke tickets for</param>
            <exception cref="T:System.ArgumentNullException">The netId supplied is null</exception>
            <exception cref="T:System.ArgumentException">The netId supplied is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.GetAllTickets">
            <summary>
            Retrieves all tickets in the ticket store that have not already expired.
            </summary>
            <returns>An enumerable collection of CasAuthenticationTickets</returns>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.GetUserTickets(System.String)">
            <summary>
            Retrieves all non-expired tickets in the ticket store associated with the 
            netId supplied.
            </summary>
            <param name="netId">The NetId to search the collection for</param>
            <returns>An enumerable collection of CasAuthenticationTickets</returns>
            <exception cref="T:System.ArgumentNullException">netId is null</exception>
            <exception cref="T:System.ArgumentException">netId is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.GetAllServiceTickets">
            <summary>
            Retrieves all CAS Service Tickets in the ticket store that have not already
            expired.
            </summary>
            <returns>An enumerable collection of service tickets</returns>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.GetUserServiceTickets(System.String)">
            <summary>
            Retrieves all non-expired CAS Service Tickets in the ticket store associated 
            with the netId supplied.
            </summary>
            <param name="netId">The netId to search the collection for</param>
            <returns>An enumerable collection of service tickets</returns>
            <exception cref="T:System.ArgumentNullException">netId is null</exception>
            <exception cref="T:System.ArgumentException">netId is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.GetAllTicketedUsers">
            <summary>
            Retrieves a list of all users that have non-expired CAS authentication 
            tickets.
            </summary>
            <returns>An enumerable collection of NetId's</returns>
        </member>
        <member name="M:DotNetCasClient.State.IServiceTicketManager.VerifyClientTicket(DotNetCasClient.CasAuthenticationTicket)">
            <summary>
            Verify that the supplied casAuthenticationTicket exists in the ticket store
            </summary>
            <param name="casAuthenticationTicket">The casAuthenticationTicket to verify</param>
            <returns>
            True if the ticket exists in the ticket store and the properties of that 
            ticket match the properties of the ticket in the ticket store.
            </returns>
        </member>
        <member name="T:DotNetCasClient.Validation.TicketValidator.Cas20ServiceTicketValidator">
            <summary>
            CAS 2.0 Ticket Validator
            </summary>
            <remarks>
            This is the .Net port of org.jasig.cas.client.validation.Cas20ServiceTicketValidator.
            </remarks>
            <author>Scott Battaglia</author>
            <author>Catherine D. Winfrey (.Net)</author>
            <author>William G. Thompson, Jr. (.Net)</author>
            <author>Marvin S. Addison</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.Cas20ServiceTicketValidator.Initialize">
            <summary>
            Performs Cas20ServiceTicketValidator initialization.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidator.Cas20ServiceTicketValidator.ParseResponseFromServer(System.String,System.String)">
            <summary>
            Parses the response from the server into a CAS Assertion and includes this in
            a CASPrincipal.
            <remarks>
            Parsing of a &lt;cas:attributes&gt; element is <b>not</b> supported.  The official
            CAS 2.0 protocol does include this feature.  If attributes are needed,
            SAML must be used.
            </remarks>
            </summary>
            <param name="response">the response from the server, in any format.</param>
            <param name="ticket">The ticket used to generate the validation response</param>
            <returns>
            a Principal backed by a CAS Assertion, if one could be created from the response.
            </returns>
            <exception cref="T:DotNetCasClient.Validation.TicketValidationException">
            Thrown if creation of the Assertion fails.
            </exception>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidator.Cas20ServiceTicketValidator.UrlSuffix">
            <summary>
            The endpoint of the validation URL.  Should be relative (i.e. not start with a "/").
            i.e. validate or serviceValidate.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Logging.Logger">
            <summary>
            Simple logger implementation that insulates application from details of logging framework/strategy.
            </summary>
            <author>Marvin S. Addison</author>
        </member>
        <member name="M:DotNetCasClient.Logging.Logger.#ctor(DotNetCasClient.Logging.Category)">
            <summary>
            Creates a new logger for the given category.
            </summary>
            <param name="category">Logger category.</param>
        </member>
        <member name="M:DotNetCasClient.Logging.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug/verbose message for the category owned by this logger.
            </summary>
            <param name="message">Log message; could be a formatted message.</param>
            <param name="parameters">Optional message format parameters.</param>
        </member>
        <member name="M:DotNetCasClient.Logging.Logger.Info(System.String,System.Object[])">
            <summary>
            Writes an informative message for the category owned by this logger.
            </summary>
            <param name="message">Log message; could be a formatted message.</param>
            <param name="parameters">Optional message format parameters.</param>
        </member>
        <member name="M:DotNetCasClient.Logging.Logger.Warn(System.String,System.Object[])">
            <summary>
            Writes a warning message for the category owned by this logger.
            </summary>
            <param name="message">Log message; could be a formatted message.</param>
            <param name="parameters">Optional message format parameters.</param>
        </member>
        <member name="M:DotNetCasClient.Logging.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes an error message for the category owned by this logger.
            </summary>
            <param name="message">Log message; could be a formatted message.</param>
            <param name="parameters">Optional message format parameters.</param>
        </member>
        <member name="T:DotNetCasClient.Security.CasPrincipal">
            <summary>
            Implementation of ICasPrincipal.
            </summary>
            <remarks>
            ICasPrincipal is the .Net port of
              org.jasig.cas.client.authentication.AttributePrincipalImpl
            </remarks>
            <author>Scott Battaglia</author>
            <author>William G. Thompson, Jr. (.Net)</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="F:DotNetCasClient.Security.CasPrincipal.CAS_AUTH_TYPE">
            <summary>
            Constant representing the IIdentity AuthenticationType for 
            authentications via CAS.
            </summary>
        </member>
        <member name="M:DotNetCasClient.Security.CasPrincipal.IsInRole(System.String)">
            <summary>
            Determines whether the user identified by this principal is
            in the role supplied.
            </summary>
            <param name="role">The role to check for membership</param>
            <returns>
            True or False indicating whether the user is in the role 
            specified.
            </returns>
        </member>
        <member name="M:DotNetCasClient.Security.CasPrincipal.#ctor(DotNetCasClient.Security.IAssertion)">
            <summary>
            Constructs a new Principal backed by the supplied Assertion.
            </summary>
            <param name="assertion">
            the Assertion that backs this Principal
            </param>
        </member>
        <member name="M:DotNetCasClient.Security.CasPrincipal.#ctor(DotNetCasClient.Security.IAssertion,System.String)">
            <summary>
            Constructs a new Principal backed by the supplied Assertion, with
            proxying capabilities.
            </summary>
            <param name="assertion">
            the Assertion that backs this Principal
            </param>
            <param name="proxyGrantingTicket">
            the proxy granting ticket associated with this Principal.
            </param>
        </member>
        <member name="M:DotNetCasClient.Security.CasPrincipal.#ctor(DotNetCasClient.Security.IAssertion,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new Principal backed by the supplied Assertion, with
            proxying capabilities.
            </summary>
            <param name="assertion">
            the Assertion that backs this Principal
            </param>
            <param name="proxyGrantingTicket">
            the proxy granting ticket associated with this Principal.
            </param>
            <param name="proxies">
            The proxy path associated with this Principal
            </param>
        </member>
        <member name="P:DotNetCasClient.Security.CasPrincipal.Assertion">
            <summary>
            The Assertion backing this Principal
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.CasPrincipal.ProxyGrantingTicket">
            <summary>
            The Proxy Granting ticket associated with this principal
            which is used to generate Proxy tickets to external 
            services.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.CasPrincipal.Proxies">
            <summary>
            The chain of URL's involved in the proxy authentication of 
            the user on this system.  If a user starts on site A, proxy 
            authenticates to site B, and then proxy authenticates to this
            site, this will contain the URL of site A and site B.
            </summary>
        </member>
        <member name="P:DotNetCasClient.Security.CasPrincipal.Identity">
            <summary>
            The IIdentity associated with this IPrincipal
            </summary>
        </member>
        <member name="T:DotNetCasClient.CasAuthenticationModule">
            <summary>
            HttpModule implementation to intercept requests and perform authentication via CAS.
            </summary>
            <author>Marvin S. Addison</author>
            <author>Scott Holodak</author>
            <author>William G. Thompson, Jr.</author>
            <author>Catherine D. Winfrey</author>
        </member>
        <member name="M:DotNetCasClient.CasAuthenticationModule.Init(System.Web.HttpApplication)">
            <summary>
            Performs initializations / startup functionality when an instance of this HttpModule
            is being created.
            </summary>
            <param name="context">the current HttpApplication</param>        
        </member>
        <member name="M:DotNetCasClient.CasAuthenticationModule.Dispose">
            <summary>
            Performs cleanup when an instance of this HttpModule is being destroyed.
            </summary>
        </member>
        <member name="M:DotNetCasClient.CasAuthenticationModule.OnBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Intercepts the beginning of the request pipeline.  This will detect SingleSignOut 
            requests.  SingleSignOut requests are posted back to the serviceName URL that
            was passed when the CAS session was established.  Since the behavior of the script
            at that URL is unknown, a POST back by the CAS server could have unexpected 
            consequences.  We want to prevent this request from authenticating and from 
            executing the HttpHandler typically associated with that URL.  So we are handling 
            this by sending back an HTTP 200 (OK) message with a blank body and short 
            circuiting all event processing and firing EndRequest directly 
            (via CompleteRequest()).
            </summary>
            <param name="sender">The HttpApplication that sent the request</param>
            <param name="e">Not used</param>
        </member>
        <member name="M:DotNetCasClient.CasAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the authentication of the request.  
            
            If the request contains a ticket, this will validate the ticket and create a 
            FormsAuthenticationTicket and encrypted cookie container for it.  It will redirect 
            to remove the ticket from the URL.  With Forms-based authentication, this is 
            required to prevent the client from automatically/silently re-authenticating on a 
            refresh or after logout.  
            
            If the request does not contain a ticket, it checks for a FormsAuthentication 
            cookie, decrypts it, extracts the FormsAuthenticationTicket, verifies that it 
            exists in the StateProvider/ServiceTicketManager, and assigns a Principal to the 
            thread and context.User properties.  All events after this request become 
            authenticated.
            </summary>
            <param name="sender">The HttpApplication that sent the request</param>
            <param name="e">Not used</param>
        </member>
        <member name="M:DotNetCasClient.CasAuthenticationModule.OnEndRequest(System.Object,System.EventArgs)">
            <summary>
            EndRequest is used to trigger the appropriate redirection.  There are
            currently three scenarios that require special redirections.  
            <list>
                <item>
                    Request is unauthenticated and is being routed to the FormsLoginUrl
                    (typically caused by UrlAuthorizationModule).  This request needs to
                    be intercepted to change the 'ReturnUrl' parameter to 'serviceName'
                </item>
                <item>
                    Request contains a CAS ticket in the URL.  This request needs to be
                    redirected back to itself without the 'ticket' parameter in order to
                    avoid potential infinite automatic ticket validation loops for when
                    a the ticket in the URL has expired or was revoked and the Renew 
                    configuration parameter is set.
                </item>
                <item>
                    Request is authenticated, but is not authorized to access the 
                    requested resource (by UrlAuthorizationModule).  If the CAS is 
                    configured with a NotAuthorizedUrl, the request is redirected to 
                    that page.  Otherwise, it is redirected to the CAS login page with
                    a forced 'Renew' property (to prevent infinite redirect loops).
                </item>
            </list>
            </summary>
            <param name="sender">The HttpApplication that sent the request</param>
            <param name="e">Not used</param>
        </member>
        <member name="T:DotNetCasClient.State.CacheServiceTicketManager">
            <summary>
            An IServiceTicketManager implementation that relies on the ASP.NET Caching model for ticket 
            storage.  Generally this implies that the ticket storage is maintained locally on the web
            server (either in memory or on disk).  A limitation of this model is that it will not 
            support clustered, load balanced, or round-robin style configurations.
            </summary>
            <author>Scott Holodak</author>
        </member>
        <member name="F:DotNetCasClient.State.CacheServiceTicketManager.CACHE_TICKET_KEY_PREFIX">
            <summary>
            This prefix is prepended to CAS Service Ticket as the key to the cache.
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.#ctor">
            <summary>
            The constructor is marked internal because this object is not suitable for use 
            outside of this assembly.
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.Initialize">
            <summary>
            Performs initialization of the CacheServiceTicketManager
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.RemoveExpiredTickets">
            <summary>
            Removes expired entries from the ticket store
            </summary>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.GetTicket(System.String)">
            <summary>
            Retrieve a CasAuthenticationTicket from the ticket store 
            by it's CAS Service Ticket
            </summary>
            <param name="serviceTicket">The service ticket generated by the CAS server</param>
            <returns>The CasAuthenticationTicket or null if no matching ticket is found</returns>
            <exception cref="T:System.ArgumentNullException">serviceTicket is null</exception>
            <exception cref="T:System.ArgumentException">serviceTicket is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.InsertTicket(DotNetCasClient.CasAuthenticationTicket,System.DateTime)">
            <summary>
            Inserts a CasAuthenticationTicket to the ticket store with a corresponding 
            ticket expiration date.
            </summary>
            <param name="casAuthenticationTicket">The CasAuthenticationTicket to insert</param>
            <param name="expiration">The date and time at which the ticket expires</param>
            <exception cref="T:System.ArgumentNullException">casAuthenticationTicket is null</exception>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.UpdateTicketExpiration(DotNetCasClient.CasAuthenticationTicket,System.DateTime)">
            <summary>
            Updates the expiration date and time for an existing ticket.  If the ticket does
            not exist in the ticket store, just return (do not throw an exception).
            </summary>
            <param name="casAuthenticationTicket">The CasAuthenticationTicket to insert</param>
            <param name="newExpiration">The new expiration date and time</param>
            <exception cref="T:System.ArgumentNullException">casAuthenticationTicket is null</exception>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.RevokeTicket(System.String)">
            <summary>
            Removes the ticket from the collection if it exists.  If the ticket does not
            exist in the ticket store, just return (do not throw an exception).
            </summary>
            <param name="serviceTicket">The ticket to remove from the ticket store</param>
            <exception cref="T:System.ArgumentNullException">serviceTicket is null</exception>
            <exception cref="T:System.ArgumentException">serviceTicket is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.ContainsTicket(System.String)">
            <summary>
            Indicates whether or not the ticket store contains the supplied serviceTicket
            </summary>
            <param name="serviceTicket">The service ticket to check for</param>
            <returns>True if the ticket is contained in the store</returns>
            <exception cref="T:System.ArgumentNullException">serviceTicket is null</exception>
            <exception cref="T:System.ArgumentException">serviceTicket is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.RevokeUserTickets(System.String)">
            <summary>
            Revoke all tickets corresponding to the supplied NetId.
            </summary>
            <param name="netId">The NetId to revoke tickets for</param>
            <exception cref="T:System.ArgumentNullException">The netId supplied is null</exception>
            <exception cref="T:System.ArgumentException">The netId supplied is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.GetAllTickets">
            <summary>
            Retrieves all tickets in the ticket store that have not already expired.
            </summary>
            <returns>An enumerable collection of CasAuthenticationTickets</returns>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.GetUserTickets(System.String)">
            <summary>
            Retrieves all non-expired tickets in the ticket store associated with the 
            netId supplied.
            </summary>
            <param name="netId">The NetId to search the collection for</param>
            <returns>An enumerable collection of CasAuthenticationTickets</returns>
            <exception cref="T:System.ArgumentNullException">netId is null</exception>
            <exception cref="T:System.ArgumentException">netId is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.GetAllServiceTickets">
            <summary>
            Retrieves all CAS Service Tickets in the ticket store that have not already
            expired.
            </summary>
            <returns>An enumerable collection of service tickets</returns>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.GetUserServiceTickets(System.String)">
            <summary>
            Retrieves all non-expired CAS Service Tickets in the ticket store associated 
            with the netId supplied.
            </summary>
            <param name="netId">The netId to search the collection for</param>
            <returns>An enumerable collection of service tickets</returns>
            <exception cref="T:System.ArgumentNullException">netId is null</exception>
            <exception cref="T:System.ArgumentException">netId is empty</exception>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.GetAllTicketedUsers">
            <summary>
            Retrieves a list of all users that have non-expired CAS authentication 
            tickets.
            </summary>
            <returns>An enumerable collection of NetId's</returns>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.VerifyClientTicket(DotNetCasClient.CasAuthenticationTicket)">
            <summary>
            Verify that the supplied casAuthenticationTicket exists in the ticket store
            </summary>
            <param name="casAuthenticationTicket">The casAuthenticationTicket to verify</param>
            <returns>
            True if the ticket exists in the ticket store and the properties of that 
            ticket match the properties of the ticket in the ticket store.
            </returns>
        </member>
        <member name="M:DotNetCasClient.State.CacheServiceTicketManager.GetTicketKey(System.String)">
            <summary>
            Converts a CAS Service Ticket to its corresponding key in the
            ticket manager store (cache provider). 
            </summary>
            <param name="serviceTicket">
            The CAS Service ticket to convert.
            </param>
            <returns>
            The cache key associated with the corresponding 
            service ticket
            </returns>
            <exception cref="T:System.ArgumentNullException">serviceTicket is null</exception>
            <exception cref="T:System.ArgumentException">serviceTicket is empty</exception>
        </member>
        <member name="T:DotNetCasClient.Validation.TicketValidationException">
            <summary>
            Generic exception to be thrown when ticket validation fails.
            </summary>
            <remarks>
            This is the .Net port of org.jasig.cas.client.validation.TicketValidationException
            </remarks>
            <author>Scott Battaglia</author>
            <author>William G. Thompson, Jr. (.Net)</author>
            <author>Scott Holodak (.Net)</author>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidationException.#ctor(System.String)">
            <summary>
            Constructs an exception with the supplied message.
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an exception with the supplied message and chained exception
            </summary>
            <param name="message">the message</param>
            <param name="exception">the original exception</param>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidationException.#ctor(System.String,System.String)">
            <summary>
            Constructs an exception with the supplied message.
            </summary>
            <param name="message">the message</param>
            <param name="code">the CAS service response error code</param>
        </member>
        <member name="M:DotNetCasClient.Validation.TicketValidationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs an exception with the supplied message and chained exception
            </summary>
            <param name="message">the message</param>
            <param name="code">the CAS service response error code</param>
            <param name="exception">the original exception</param>
        </member>
        <member name="P:DotNetCasClient.Validation.TicketValidationException.Code">
            <summary>
            The error code contained in the CAS service response.
            </summary>
        </member>
        <member name="T:DotNetCasClient.Utils.CommonUtils">
            <summary>
            Utility methods for the Jasig CAS Client.
            </summary>
            <author>Marvin S. Addison</author>
        </member>
        <member name="M:DotNetCasClient.Utils.CommonUtils.AssertNotNull(System.Object,System.String)">
            <summary>
            Checks whether the object is null.
            </summary>
            <param name="entity">the object to check</param>
            <param name="message">the message to display if the object is null.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the object is <code>null</code>.  Includes the provided
            message.
            </exception>
        </member>
        <member name="M:DotNetCasClient.Utils.CommonUtils.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks whether the string is null or empty.
            </summary>
            <param name="entity">the string to check</param>
            <param name="message">the message to display if the string is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the object is <code>null</code>.  Includes the provided
            message.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the object is an empty string.  Includes the provided
            message.
            </exception>
        </member>
    </members>
</doc>
